#!/bin/bash

# ABCI Interactive Shell Launcher
# Usage: qsub_shell [OPTIONS]
# Options:
#   -g, --gres gpu:N    Number of GPUs (default: 1, use 0 or --no-gpu for CPU-only)
#   --no-gpu            CPU-only mode (equivalent to -g 0)
#   -t, --time MINUTES  Time limit in minutes (default: 30)
#   -m, --mem GB        Memory in GB (default: 8)
#   -c, --cores N       Number of CPU cores (default: 1)
#   -p, --project NAME  Project group name (default: gcf51142)
#   -q, --queue NAME    Queue name (default: rt_HG for GPU, rt_HC for CPU-only)
#   -n, --name NAME     Job name (default: interactive)
#   -h, --help          Show this help

set -e

# Default values
GPU_COUNT=1
TIME_LIMIT=30
MEMORY_GB=8
CPU_CORES=1
PROJECT_GROUP="gcf51142"
QUEUE_NAME="rt_HG"
JOB_NAME="interactive"
CPU_ONLY=false

# Help function
show_help() {
    cat << EOF
ABCI Interactive Shell Launcher

Usage: qsub_shell [OPTIONS]

Options:
    -g, --gres gpu:N    Number of GPUs (default: 1, use 0 or --no-gpu for CPU-only)
    --no-gpu            CPU-only mode (equivalent to -g 0)
    -t, --time MINUTES  Time limit in minutes (default: 30)
    -m, --mem GB        Memory in GB (default: 8)
    -c, --cores N       Number of CPU cores (default: 1)
    -p, --project NAME  Project group name (default: gcf51142)
    -q, --queue NAME    Queue name (default: rt_HG for GPU, rt_HC for CPU-only)
    -n, --name NAME     Job name (default: interactive)
    -h, --help          Show this help

Examples:
    qsub_shell                           # Default: 1 GPU, 30 min
    qsub_shell -g 2 -t 60               # 2 GPUs, 60 minutes
    qsub_shell --gres gpu:4 --time 120  # 4 GPUs, 120 minutes
    qsub_shell --no-gpu                 # CPU-only mode
    qsub_shell -g 0                     # CPU-only mode (alternative)
    qsub_shell -m 16 -c 4               # 16GB RAM, 4 CPU cores

Resource Types:
    rt_HC: CPU-only, CPU32, Memory320GB
    rt_HG: GPU1, CPU16, Memory160GB
    rt_AG: GPU4, CPU64, Memory512GB
    rt_G:  GPU8, CPU128, Memory1024GB
EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -g|--gres)
            if [[ $2 == gpu:* ]]; then
                GPU_COUNT="${2#gpu:}"
                shift 2
            elif [[ $2 =~ ^[0-9]+$ ]]; then
                # Allow direct number specification like -g 0
                GPU_COUNT="$2"
                shift 2
            else
                echo "Error: GPU specification must be 'gpu:N' or a number" >&2
                exit 1
            fi
            ;;
        --no-gpu)
            GPU_COUNT=0
            CPU_ONLY=true
            shift
            ;;
        -t|--time)
            TIME_LIMIT="$2"
            shift 2
            ;;
        -m|--mem)
            MEMORY_GB="$2"
            shift 2
            ;;
        -c|--cores)
            CPU_CORES="$2"
            shift 2
            ;;
        -p|--project)
            PROJECT_GROUP="$2"
            shift 2
            ;;
        -q|--queue)
            QUEUE_NAME="$2"
            shift 2
            ;;
        -n|--name)
            JOB_NAME="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Error: Unknown option $1" >&2
            show_help
            exit 1
            ;;
    esac
done

# Validate inputs
if ! [[ "$GPU_COUNT" =~ ^[0-9]+$ ]] || [ "$GPU_COUNT" -lt 0 ]; then
    echo "Error: GPU count must be a non-negative integer" >&2
    exit 1
fi

if ! [[ "$TIME_LIMIT" =~ ^[0-9]+$ ]] || [ "$TIME_LIMIT" -lt 1 ]; then
    echo "Error: Time limit must be a positive integer" >&2
    exit 1
fi

if ! [[ "$MEMORY_GB" =~ ^[0-9]+$ ]] || [ "$MEMORY_GB" -lt 1 ]; then
    echo "Error: Memory must be a positive integer" >&2
    exit 1
fi

if ! [[ "$CPU_CORES" =~ ^[0-9]+$ ]] || [ "$CPU_CORES" -lt 1 ]; then
    echo "Error: CPU cores must be a positive integer" >&2
    exit 1
fi

# Set queue based on GPU count
if [ "$GPU_COUNT" -eq 0 ] || [ "$CPU_ONLY" = true ]; then
    QUEUE_NAME="rt_HC"
    GPU_COUNT=0
fi

# Convert time to HH:MM:SS format
HOURS=$((TIME_LIMIT / 60))
MINUTES=$((TIME_LIMIT % 60))
TIME_FORMATTED=$(printf "%02d:%02d:00" $HOURS $MINUTES)

# Build qsub command
QSUB_CMD="qsub -I -P $PROJECT_GROUP -q $QUEUE_NAME -l select=1 -l walltime=$TIME_FORMATTED -N $JOB_NAME"

# Add GPU specification if using multi-GPU queues
if [ "$QUEUE_NAME" = "rt_AG" ] || [ "$QUEUE_NAME" = "rt_G" ]; then
    QSUB_CMD="$QSUB_CMD -l gpu=$GPU_COUNT"
fi

echo "Starting interactive job with:"
echo "  Project: $PROJECT_GROUP"
echo "  Queue: $QUEUE_NAME"
if [ "$GPU_COUNT" -eq 0 ]; then
    echo "  GPUs: CPU-only mode"
else
    echo "  GPUs: $GPU_COUNT"
fi
echo "  Time limit: $TIME_LIMIT minutes ($TIME_FORMATTED)"
echo "  Job name: $JOB_NAME"
echo "  Command: $QSUB_CMD"
echo

# Execute qsub command
exec $QSUB_CMD 